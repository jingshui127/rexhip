FUNCTION_BLOCK "Mitsubishi Inverter FR-D700"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_INPUT 
      mb_addr : USInt;   // Device address
   END_VAR

   VAR_IN_OUT 
      query : "mb_query";
   END_VAR

   VAR 
      sb : "mb_station_block_udt";
      data : "variable_frequency_drive_udt";
      write : Struct
         cmd : Struct
            cmd : Struct
               "8" : Bool;   // 8
               "9" : Bool;   // 9
               "10" : Bool;   // 10
               "11" : Bool;   // 11
               "12" : Bool;   // 12
               "13" : Bool;   // 13
               "14" : Bool;   // 14
               "15" : Bool;   // 15
               stop : Bool;   // 0
               forward : Bool;   // 1
               reverse : Bool;   // 2
               "3" : Bool;   // 3
               "4" : Bool;   // 4
               "5" : Bool;   // 5
               "6" : Bool;   // 6
               "7" : Bool;   // 7
            END_STRUCT;
            operatingMode : Int := 16#10;
         END_STRUCT;
         speed : Int;
      END_STRUCT;
      read : Struct
         status : Struct
            "8" : Bool;   // 8
            "9" : Bool;   // 9
            "10" : Bool;   // 10
            "11" : Bool;   // 11
            "12" : Bool;   // 12
            "13" : Bool;   // 13
            "14" : Bool;   // 14
            fault : Bool;   // 15
            run : Bool;   // 0
            forward : Bool;   // 1
            reverse : Bool;   // 2
            "3" : Bool;   // 3
            overload : Bool;   // 4
            "5" : Bool;   // 5
            "6" : Bool;   // 6
            "7" : Bool;   // 7
         END_STRUCT;
      END_STRUCT;
   END_VAR

   VAR_TEMP 
      param : "mb_set_udt";
      reset : Word;
   END_VAR


BEGIN
	// Mitsubishi Electric - Inverter FR-D700
	// 
	// https://dl.mitsubishielectric.com/dl/fa/document/manual/inv/ib0600366eng/ib0600366engg.pdf
	
	"mb_station_block_header"(sb := #sb, mb_query := #query);
	#query.mb_addr := #mb_addr;
	
	// Read
	#query.mode := #query.c.mode.read;
	IF "mb_query_range"(start := 40201, end := 40214, q := #query) THEN
	    #param.factor := 1;
	    #data.out.frequency := "mb_buffer_get"(addr := 40201, param := #param, q := #query) * 0.01;
	    #data.out.current := "mb_buffer_get"(addr := 40202, param := #param, q := #query) * 0.01;
	    #data.out.voltage := "mb_buffer_get"(addr := 40203, param := #param, q := #query) * 0.1;
	    #data.out.power := "mb_buffer_get"(addr := 40214, param := #param, q := #query) * 0.01;
	END_IF;
	#query(data_addr := 40009, data_ptr := #read.status);
	#data.out.error := #read.status.fault OR #sb.out.Error;
	#data.out.in_operation := #read.status.forward OR #read.status.reverse ;
	
	// Write
	#query.mode := #query.c.mode.write;
	#write.cmd.cmd.stop := NOT #data.in.start;
	#write.cmd.cmd.forward := #data.in.start AND #data.in.ref >= 0;
	#write.cmd.cmd.reverse := #data.in.start AND #data.in.ref < 0;
	#write.speed := REAL_TO_INT(#data.in.ref);
	#query(data_addr := 40009, data_ptr := #write.cmd);
	#query(data_addr := 40014, data_ptr := #write.speed);
	IF #data.in.reset THEN
	    #query(data_addr := 40002, data_ptr := #reset);
	END_IF;
	
	"mb_station_block_footer"(sb := #sb, mb_query := #query);
	
END_FUNCTION_BLOCK

